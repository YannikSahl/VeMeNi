@using Microsoft.AspNetCore.Components.Web
@using Website.Models
@using Website.Services
@inject JsonFileJobService JobService


<div class="card-columns">
    @foreach (var job in JobService.GetJobs())
    {
        <div class="card">
            <div class="card-img" style="background-image: url('@job.Image');"></div>
            <div class="card-body">
                <h5 class="card-title">@job.Title</h5>

            </div>
        </div>

        <div class="card-footer">
            <small class="text-muted">
                <button @onclick="(e => SelectJob(job.Id))"
                        data-toggle="modal" data-target="#jobModal" class="btn btn-primary">
                    More Info
                </button>
            </small>
        </div>
    }
</div>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">


    @if (selectedJob != null)
    {
        <div class="modal fade" id="jobModal" tabindex="-1" role="dialog" aria-labelledby="jobTitle" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="jobTitle">@selectedJob.Title</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="card">
                            <div class="card-img" style="background-image: url('@selectedJob.Image');">
                            </div>
                            <div class="card-body">
                                <p class="card-text">@selectedJob.Description</p>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        @if (ratingCount == 0)
                        {
                            <span>Be the first to vote!</span>
                        }
                        else
                        {
                            <span>@ratingCount @ratingLabel </span>
                        }

                        @for (int i = 0; i < 6; i++)
                        {
                            var currentStar = i;
                            if (i <= ratingAverage)
                            {
                                <span class="fa-star fa checked" @onclick="(e => SubmitRating(currentStar))"></span>
                            }
                            else
                            {
                                <span class="fa-star fa" @onclick="(e => SubmitRating(currentStar))"></span>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    }

@code {
    Job selectedJob;
    int selectedJobId;

    double ratingAverage = 0;
    int ratingCount = 0;
    string ratingLabel;

    void SelectJob(int jobId)
    {
        selectedJobId = jobId;
        selectedJob = JobService.GetJobs().First(x => x.Id == jobId);
        GetCurrentRating();
    }

    void GetCurrentRating()
    {
        // Get rating values
        if (selectedJob.Creator_ratings != null)
        {
            ratingAverage = selectedJob.Creator_ratings.Average();
            ratingCount = selectedJob.Creator_ratings.Count();
            ratingLabel = ratingCount > 1 ? "Votes" : "Vote";

        }

        // Debug
        System.Console.WriteLine($"Current rating: for {selectedJob.Creator_ratings}: {ratingAverage}");
    }

    void SubmitRating(int rating)
    {
        // Debug
        System.Console.WriteLine($"Received rating for {selectedJob.Creator_ratings}: {rating}");

        // Use method from service
        JobService.AddRating(selectedJob.Creator, rating);

        // Select job
        SelectJob(selectedJobId);
    }
}
